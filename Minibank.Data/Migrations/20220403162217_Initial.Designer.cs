// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Minibank.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Minibank.Data.Migrations
{
    [DbContext(typeof(MinibankContext))]
    [Migration("20220403162217_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankAccountDbModelMoneyTransferHistoryUnitDbModel", b =>
                {
                    b.Property<string>("AccountsId")
                        .HasColumnType("text");

                    b.Property<string>("HistoryUnitsId")
                        .HasColumnType("text");

                    b.HasKey("AccountsId", "HistoryUnitsId");

                    b.HasIndex("HistoryUnitsId");

                    b.ToTable("history_accounts", (string)null);
                });

            modelBuilder.Entity("Minibank.Data.BankAccounts.BankAccountDbModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<double>("AccountBalance")
                        .HasColumnType("double precision")
                        .HasColumnName("account_balance");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closing_date");

                    b.Property<int>("Currency")
                        .HasColumnType("integer")
                        .HasColumnName("currency");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("opening_date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_bank_account_id");

                    b.HasIndex("UserId");

                    b.ToTable("bank_accounts", (string)null);
                });

            modelBuilder.Entity("Minibank.Data.MoneyTransferHistoryUnits.MoneyTransferHistoryUnitDbModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<int>("Currency")
                        .HasColumnType("integer")
                        .HasColumnName("currency");

                    b.Property<string>("FromAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_account_id");

                    b.Property<string>("ToAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to_account_id");

                    b.HasKey("Id")
                        .HasName("pk_history_unit_id");

                    b.ToTable("transactions_history", (string)null);
                });

            modelBuilder.Entity("Minibank.Data.Users.UserDbModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.HasKey("Id")
                        .HasName("pk_user_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BankAccountDbModelMoneyTransferHistoryUnitDbModel", b =>
                {
                    b.HasOne("Minibank.Data.BankAccounts.BankAccountDbModel", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minibank.Data.MoneyTransferHistoryUnits.MoneyTransferHistoryUnitDbModel", null)
                        .WithMany()
                        .HasForeignKey("HistoryUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Minibank.Data.BankAccounts.BankAccountDbModel", b =>
                {
                    b.HasOne("Minibank.Data.Users.UserDbModel", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Minibank.Data.Users.UserDbModel", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
